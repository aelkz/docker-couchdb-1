#!/bin/bash -l

: ${COUCHDB_ADMIN_USER:=admin}
: ${COUCHDB_ADMIN_PASS:=secret}

service=couchdb
local_node=localhost
local_host=http://$local_node
local_shost=http://$COUCHDB_ADMIN_USER:$COUCHDB_ADMIN_PASS@$local_node

# Helpers
function log 
{
    local msg="$1"
    local msg="\E[36m[*]\E[0m $(date) : ${msg}"
    echo -e "$(basename $0): $msg"
}

function errlog
{
    local msg="$1"
    local msg="\E[31m[x]\E[0m $(date) : ${msg}"
    echo -e "$(basename $0): $msg"
}

function wait_on
{
    local host="${1:-$local_host}"
    until host_is_up $host:5984
    do
        sleep 1
    done
}

function get_num_nodes_for_service
{
    local service="${1:-$service}"
    dig +short +search -t srv $service | wc -l
}

function get_nodes_for_service
{
    local service="${1:-$service}"
    dig +short +search -t srv $service | awk '{print $4}' | sed 's/.$//' | sort
}

function get_first_node_for_service
{
    local service="${1:-$service}"
    dig +short +search -t srv $service | awk '{print $4}' | sed 's/.$//' | sort | head -1
}

function get_rest_nodes_for_service
{
    local service="${1:-$service}"
    dig +short +search -t srv couchdb | awk '{print $4}' | sed 's/.$//' | sort | tail -n +2
}

function clean_exit
{
    rm -f ~/.init-node > /dev/null 2>&1
}


# Tests
function host_is_up
{
    local shost="${1:-$local_shost}"
    curl -sS $shost --connect-timeout 2 --head --fail > /dev/null 2>&1
}

function node_is_invalid
{
    local query="$1"
    local result=$(dig +short +search $query | wc -l)
    if (( $result > 0 ))
    then
        return 1
    else
        return 0
    fi
}

function node_not_in_nodes_db
{
    local this_node=${1:-$(hostname -f)}
    local master_node=${1:-$(get_first_node_for_service)}
    local master_host=http://$COUCHDB_ADMIN_USER:$COUCHDB_ADMIN_PASS@$master_node
    curl -sS $master_host:5986/_nodes/couchdb@$this_node | grep -q _id
    if [ $? = 0 ]
    then
        return 1
    else
        return 0
    fi
}

# if is node 2+
function is_not_first_node {
    num_nodes=$(get_num_nodes_for_service)
    log "num_nodes: $num_nodes"
    if (( $num_nodes > 1 ))
    then
        return 0
    else
        return 1
    fi
}

# Actions / Targets
function show_nodes
{
    local shost="${1:-$local_shost}"
    curl -sS $shost:5986/_nodes/_all_docs
}

function show_membership
{
    local shost="${1:-$local_shost}"
    curl -sS $shost:5984/_membership
}

function enable_cluster
{
    local host="${1:-$local_host}"
    curl -sS -X POST $host:5984/_cluster_setup -H 'Content-Type: application/json' -d "{\"action\": \"enable_cluster\", \"username\": \"$COUCHDB_ADMIN_USER\", \"password\": \"$COUCHDB_ADMIN_PASS\"}"
}

function add_node
{
    local node_to_add=$1
    [[ -z $node_to_add ]] && return 1
    local master_node="${2:-$local_node}"
    local master_host=http://$COUCHDB_ADMIN_USER:$COUCHDB_ADMIN_PASS@$master_node
    result=$(curl -sS -X POST $master_host:5984/_cluster_setup -H 'Content-Type: application/json' -d "{\"action\":\"add_node\", \"host\":\"$node_to_add\", \"username\":\"$COUCHDB_ADMIN_USER\", \"password\":\"$COUCHDB_ADMIN_PASS\"}")
    log "$FUNCNAME-result: $result"
}

function maybe_add_node
{
    local node_to_add=$1
    [[ -z $node_to_add ]] && return 1
    local master_node="${2:-$local_node}"
    local master_host=http://$COUCHDB_ADMIN_USER:$COUCHDB_ADMIN_PASS@$master_node
    if node_is_invalid $node_to_add
    then
        log "Invalid host $node_to_add"
        return 1
    fi
    if node_not_in_nodes_db $node_to_add $master_node
    then
        log "not in database, adding: $this_node > $master_host"
        result=$(curl -sS -X POST $master_host:5984/_cluster_setup -H 'Content-Type: application/json' -d "{\"action\":\"add_node\", \"host\":\"$node_to_add\", \"username\":\"$COUCHDB_ADMIN_USER\", \"password\":\"$COUCHDB_ADMIN_PASS\"}")
        log "$FUNCNAME-result: $result"
    else
        log "host already in database, skipping"
    fi
}

function add_this_node_to_master
{
    local this_host=$(hostname -f)
    local master_host=$(get_first_node_for_service)
    log "this_host: $this_host  > master_host: $master_host"
    maybe_add_node $this_host $master_host
}

function finish_cluster
{
    local shost="${1:-$local_shost}"
    result=$(curl -sS -X POST $shost:5984/_cluster_setup -H 'Content-Type: application/json' -d '{"action": "finish_cluster"}')
    log "$FUNCNAME-result: $result"
}

function autocluster_kubernetes
{
    wait_on $local_host
    if is_not_first_node
    then
        log "We're not the first node"
        add_this_node_to_master
    else
        log "We're First node ..."
    fi
    finish_cluster
    clean_exit
}

function standard_init
{
    wait_on $local_host
    finish_cluster
    clean_exit
}

function auto_init
{
    if [[ $COUCHDB_AUTOCLUSTER_MODE = kubernetes ]]
    then
        autocluster_kubernetes
    else
        standard_init
    fi
}

if [[ $1 ]]
then
    "$@"
else
    echo "$(basename $0): {show_nodes|show_membership|enable_cluster [host]|add_node <node-to-add> <master-node>|add_this_mode_to_master|finish_cluster|autocluster_kubernetes|auto_init|standard_init}"
fi
